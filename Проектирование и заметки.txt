
                                        АККАУНТЫ И РЕГИСТРАЦИЯ:

1 - Регистрация.

    Логин - реализованы правила валидации (ограничения и уникальность логина в БД)
    email - реализованы правила валидации (уникальный email в БД и корректность ввода)
    пароли - реализованы правила валидации (ограничения и совпадение в двух полях)

    При успешной регистрации юзер создается в БД и получает email-письмо с ссылкой активации аккаунта.
    Все ошибки валидации выводятся под своим полем юзеру.


2 - Логин.

    Вывод ошибки валидации юзеру при вводе несуществующих данных.


3 - Восстановление пароля.

    Каждое поле открывается по мере успешного прохождения прошлого поля.
        Email найден -> высылаем код на почту -> сравниваем код с тем, что в БД -> ставим новый пароль (валидируем как при реге).

    Все ошибки на этапах выводим юзеру под формой. После успешной смены пароля, форма закрывается и остается форма логина.


4 - Выход из аккаунта.

    При нажатии выхода, refresh token текущего access token'a (полученного при входе) отправляется в blacklist.


5 - Личный Кабинет.

    Доступен только авторизованным юзерам.
    Внутри происходит запрос в testEndPoint и выводит инфо о юзере(email, name), статусе его авторизации, к примеру.
    Если юзер подтвердил свой аккаунт через email, это будет показано.
    Если юзер не подтвердил свой аккаунт, это будет показано + появится кнопка для отправки нового письма активации.
    Реализована функция смены пароля с валидацией старого и нового паролей. Все ошибки выводятся юзеру.


Проблемы аккаунтов:

    1. Основной вопрос хранение JWT-токенов, сейчас в localStorage.
    2. Находясь в кабинете больше 5 минут(lifetime refresh tokena) без обновления страницы, не получится сменить пароль,
         так как код 401 и токен уже не действителен. Обновление страницы фиксит, надо что-то придумать.
    3. Нужно сделать какое-то удаление кодов верификации из БД, чтобы не засорялось мертвым грузом.






                                                КОРЗИНА:


1. Создайте модель Django для корзины: В вашем проекте Django создайте новую модель для корзины.
Эта модель должна содержать такие поля, как продукт, количество и цена.

2. Создайте представления и URL-адреса для корзины: Далее создайте в Django представления для добавления и
удаления товаров из корзины. Вам также нужно будет создать соответствующие URL-адреса для этих представлений.

3. Создайте компонент React для корзины: В своем проекте React создайте новый компонент для корзины.
Этот компонент должен будет отображать содержимое корзины, позволять пользователям добавлять и удалять товары,
а также отображать общую цену.

4. Используйте вызовы API для соединения Django и React: Чтобы соединить части проекта Django и React,
 используйте вызовы API. В представлениях Django создайте методы для добавления и удаления товаров из корзины.
 Эти методы должны возвращать ответы в формате JSON. Затем, в компоненте React,
 используйте API fetch для вызова этих методов и соответствующего обновления корзины.

5. Добавьте функциональность для аутентификации пользователей:
Если вы хотите позволить пользователям сохранять свои корзины между сессиями или ассоциировать корзины
с определенными учетными записями пользователей, вам необходимо реализовать аутентификацию пользователей
в ваших проектах Django и React. Это потребует создания моделей пользователей, представлений входа и выхода,
а также соответствующих компонентов React.